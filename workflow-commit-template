#!/usr/bin/env bash
set -o errexit
# ==============================================================================
# workflow-commit-template
# Author: Connor de la Cruz (connor.c.delacruz@gmail.com)
# ------------------------------------------------------------------------------
# Usage: workflow-commit-template [<ticket number>] [-V] [-h]
#
# Run workflow-commit-template -h for details.
# ------------------------------------------------------------------------------
# Configs:
#   - workflow.commitTemplateFormat
#   - workflow.ticketInputFormatRegex
#   - workflow.ticketFormatCapitalize
# ------------------------------------------------------------------------------
# Creates and configures a git commit template for the current branch that
# includes a ticket number before the commit message.
#
# If not arguments are passed, user will be prompted for the ticket number.
# ------------------------------------------------------------------------------
# For more information, see workflow-commit-template section in README.md
# ==============================================================================

# Imports ----------------------------------------------------------------------
readonly SCRIPT_DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" >/dev/null 2>&1 && pwd )"
readonly UTIL_DIR="$SCRIPT_DIR/util"
source "$UTIL_DIR/ALL.sh"

# Functions --------------------------------------------------------------------

# Attempts to match input using $TICKET_INPUT_FORMAT_REGEX and apply formatting
# based on configs. Returns the formatted matching string or an empty one if no
# match was found.
#
# Arguments:
#   Text to sanitize and format
# Outputs:
#   Formatted text
fmt_ticket_number() {
    local input="$1"
    local formatted=
    if [[ "$input" =~ $TICKET_INPUT_FORMAT_REGEX ]]; then
        formatted="${BASH_REMATCH[0]}"
    fi
    if [[ -n "$formatted" ]]; then
        # Apply formatting based on configs
        if [[ $TICKET_FORMAT_CAPITALIZE > 0 ]]; then
            # TODO doing this the bash 3 compatible way, but if we're already using new features then make this consistent
            formatted="$(echo "$formatted" | tr [:lower:] [:upper:])"
        fi
    fi
    echo "$formatted"
}

# Replace placeholders in configured commit template format string and echo
# results
#
# Arguments:
#   Ticket number
render_commit_template_body() {
    local ticket="$1"
    local commit_template_body="$COMMIT_TEMPLATE_FORMAT"
    # Replace placeholders
    commit_template_body="${commit_template_body//%%ticket%%/$ticket}"
    echo "$commit_template_body"
}

show_help() {
    echo 'Usage: workflow-commit-template [<ticket number>] [-V] [-h]'
    echo 'Options:'
    echo '  -V  Print version number and exit.'
    echo '  -h  Show this help message and exit.'
}

# Main -------------------------------------------------------------------------

# Prompts the user for a ticket number, validates and sanitizes input,
# then creates a commit template with the ticket number and configures
# the local git repo to use that template.
#
# Arguments:
#   (Optional) Ticket number, will be prompted if not provided or invalid
main() {
    # -h and -V parsing
    if [[ "$1" == '-h' ]]; then
        show_help
        exit
    elif [[ "$1" == '-V' ]]; then
        show_version_and_exit
    fi

    # Check git version > 2.23 and that we're in a repo currently
    local version_check="$(verify_git_version)"
    [[ -n "$version_check" ]] && echo_error "$version_check" && exit 1
    verify_git_repo

    local ticket
    # If a positional argument was provided, try using it as the ticket number
    if [[ $# > 0 ]]; then
        ticket="$(fmt_ticket_number "$1")"
    fi
    # If $ticket is empty, prompt for ticket number
    while [[ -z "$ticket" ]]; do
        echo "Enter ticket number to use in commit messages."
        read -p "$(echo_prompt "Ticket Number")" ticket
        # TODO if formatted ticket number doesn't match input exactly, info output about changes
        ticket="$(fmt_ticket_number "$ticket")"
        [[ -n "$ticket" ]] && echo "" && break
        # Loop if improperly formatted
        # TODO: details on workflow.ticketInputFormatRegex if configured?
        echo_error "Invalid ticket number formatting." \
            "Must match regex: $TICKET_INPUT_FORMAT_REGEX"
    done

    local repo_root_dir="$(git_repo_root)"
    # Initialize repo if not already
    if [[ "$(is_workflow_configured "$repo_root_dir")" < 1 ]]; then
        echo "Repo hasn't been initialized, setting up now..."
        init_workflow "$repo_root_dir"
    fi
    local branch_name="$(git_current_branch)"
    local workflow_config_path="$(git config --local --includes --get workflow.configpath)"
    # TODO: remove invalid characters from template name
    local commit_template_file=".gitmessage_local_${ticket}_${branch_name}"
    local commit_template_path="$repo_root_dir/$commit_template_file"

    echo "Creating commit template file..."
    render_commit_template_body "$ticket" > "$commit_template_path"
    if [[ ! -f "$commit_template_path" ]]; then
        echo_error "Something went wrong when attempting to create commit template."
        exit 1
    else
        echo_success "Template file created:" \
                     "$commit_template_path"
    fi

    # Add 'config_' prefix and remove any slashes for filename
    local branch_config_file="config_${branch_name//[\/]/}"
    local branch_config_path="$repo_root_dir/.git/$branch_config_file"
    echo "Creating git config for branch $branch_name..."
    git config -f "$branch_config_path" commit.template "$commit_template_file"
    echo_success "Config created:" \
                 "$branch_config_path"
    echo "Configuring local repo..."
    git config -f "$workflow_config_path" includeIf.onbranch:${branch_name}.path "$branch_config_file"
    echo_success "Local repo configured." \
                 "Will include configs from .git/$branch_config_file" \
                 "when on branch $branch_name."
}
main "$@"
