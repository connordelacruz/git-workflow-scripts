#!/usr/bin/env bash
set -o errexit
# ==============================================================================
# workflow-tidy-up
# Author: Connor de la Cruz (connor.c.delacruz@gmail.com)
# ------------------------------------------------------------------------------
# TODO DOC
#
# ==============================================================================

# Imports ----------------------------------------------------------------------
readonly SCRIPT_DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" >/dev/null 2>&1 && pwd )"
readonly UTIL_DIR="$SCRIPT_DIR/util"
source "$UTIL_DIR/ALL.sh"

# Functions --------------------------------------------------------------------

show_help() {
    # TODO UPDATE
    echo "Usage: workflow-tidy-up [-f] [-h]"
    echo "Options:"
    echo "  -f  Skip confirmation prompt."
    echo "  -h  Show this help message and exit."
}

# Main -------------------------------------------------------------------------

# TODO DOC
#
# Arguments:
#   Takes all optional arguments for script. For details on these arguments,
#   see show_help()
main() {
    # Parse arguments:
    # -f skip confirmation prompt
    # -B include current branch
    local arg_skip_confirmation arg_include_current_branch
    while getopts 'fBh' opt; do
        case ${opt} in
            f)
                arg_skip_confirmation=1
                ;;
            B)
                arg_include_current_branch=1
                ;;
            h|?)
                show_help
                [[ "$opt" = "?" ]] && local exit_code=1 || local exit_code=0
                exit $exit_code
                ;;
        esac
    done
    shift $((OPTIND -1))

    # Check git version > 2.23 and that we're in a repo currently
    local version_check="$(verify_git_version)"
    [[ -n "$version_check" ]] && echo_error "$version_check" && exit 1
    verify_git_repo

    local repo_root_dir="$(git_repo_root)"
    if [[ "$(is_workflow_configured "$repo_root_dir")" < 1 ]]; then
        echo "Repo hasn't been initialized, no tidying to be done."
        exit
    fi

    # Search for includeif configs
    local workflow_config_path="$(git config --local --includes --get workflow.configpath)"
    readonly pat='includeif\.onbranch:(.*)\.path (.*)'
    local matching_configs="$(git config -f "$workflow_config_path" --get-regexp $pat)"
    [[ -z "$matching_configs" ]] && echo "Nothing to tidy up." && exit

    local current_branch="$(git_current_branch)"
    local current_branch_has_configs=0
    # Parse results and get branch names
    local branch_names
    declare -a branch_names
    while IFS= read -r line; do
        if [[ "$line" =~ $pat ]]; then 
            local branch_name="${BASH_REMATCH[1]}"
            # TODO: what if another branch uses same template as current branch?
            if [[ "$branch_name" == "$current_branch" ]]; then
                current_branch_has_configs=1
                # Omit current branch unless specified
                [[ -z "$arg_include_current_branch" ]] && continue
            fi
            branch_names+=("$branch_name")
        fi
    done <<< "$matching_configs"

    if [[ -z "$branch_names" ]]; then
        # Case where only current branch has configs/template and -B not specified
        if [[ -n "$current_branch_has_configs" ]]; then
            echo "Nothing to tidy up except current branch."
        # The following case shouldn't happen, but including for completeness
        else
            echo "Nothing to tidy up."
        fi
        exit
    fi

    local confirm_delete="$arg_skip_confirmation"
    if [[ -z "$confirm_delete" ]]; then
        echo_warning "Commit templates and configs will be removed for the following branches:" \
            "${branch_names[@]}"
        echo ""
        if [[ -n "$current_branch_has_configs" ]]; then
            if [[ -n "$arg_include_current_branch" ]]; then
                echo_warning "This includes configs for the branch you are currently on!" 
            else
                echo_info "Commit template and configs for the current branch will not be removed:" \
                          "$current_branch"
            fi
            echo ""
        fi
    fi
    while [[ -z "$confirm_delete" ]]; do
        local yn
        echo "Would you like to continue?"
        read -n 1 -p "$(echo_prompt "Confirm (y/[n])")" yn
        echo ""
        yn="${yn:-n}"
        case $yn in
            [Yy]*)
                confirm_delete=1
                break
                ;;
            [Nn]*)
                confirm_delete=0
                break
                ;;
            *)
                echo_error "Please select: y/n."
                ;;
        esac
    done
    [[ "$confirm_delete" < 1 ]] && exit

    # TODO: optionally delete branches? if so call finish instead?
    for branch_name in "${branch_names[@]}"; do
        "$UNSET_COMMIT_TEMPLATE_SCRIPT" -b "$branch_name"
        echo ""
    done
    # TODO: Look for orphaned .gitmessage_local* templates
    # TODO: if orphans, warn and prompt 
    # TODO: if confirmed, rm orphans
}
main "$@"
