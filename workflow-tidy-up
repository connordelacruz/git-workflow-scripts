#!/usr/bin/env bash
set -o errexit
# ==============================================================================
# workflow-tidy-up
# Author: Connor de la Cruz (connor.c.delacruz@gmail.com)
# ------------------------------------------------------------------------------
# TODO DOC
#
# ==============================================================================

# Imports ----------------------------------------------------------------------
readonly SCRIPT_DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" >/dev/null 2>&1 && pwd )"
readonly UTIL_DIR="$SCRIPT_DIR/util"
source "$UTIL_DIR/ALL.sh"

# Functions --------------------------------------------------------------------

show_help() {
    # TODO UPDATE
    echo "Usage: workflow-tidy-up [-f] [-B] [-o] [-h]"
    echo "Options:"
    echo "  -f  Skip confirmation prompt."
    echo "  -B  TODO."
    echo "  -o  TODO."
    echo "  -h  Show this help message and exit."
}

# Main -------------------------------------------------------------------------

# TODO DOC
#
# Arguments:
#   Takes all optional arguments for script. For details on these arguments,
#   see show_help()
main() {
    # Parse arguments:
    # -f skip confirmation prompt
    # -B include current branch
    # -o only clean up orphans
    local arg_skip_confirmation arg_include_current_branch arg_orphans_only
    while getopts 'fBoh' opt; do
        case ${opt} in
            f)
                arg_skip_confirmation=1
                ;;
            B)
                arg_include_current_branch=1
                ;;
            o)
                arg_orphans_only=1
                ;;
            h|?)
                show_help
                [[ "$opt" = "?" ]] && local exit_code=1 || local exit_code=0
                exit $exit_code
                ;;
        esac
    done
    shift $((OPTIND -1))

    # Check git version > 2.23 and that we're in a repo currently
    local version_check="$(verify_git_version)"
    [[ -n "$version_check" ]] && echo_error "$version_check" && exit 1
    verify_git_repo

    local repo_root_dir="$(git_repo_root)"
    if [[ "$(is_workflow_configured "$repo_root_dir")" < 1 ]]; then
        echo "Repo hasn't been initialized, no tidying to be done."
        exit
    fi

    # Search for includeif configs
    local workflow_config_path="$(git config --local --includes --get workflow.configpath)"
    readonly pat='includeif\.onbranch:(.*)\.path (.*)'
    local matching_configs="$(git config -f "$workflow_config_path" --get-regexp $pat)"

    # Keep track of current branch configs
    local current_branch="$(git_current_branch)"
    local current_branch_template

    # Parse results and get branch names, config files, and configured commit.templates
    local -a target_branch_names branch_config_files configured_commit_templates
    while IFS= read -r line; do
        if [[ "$line" =~ $pat ]]; then 
            local branch_name="${BASH_REMATCH[1]}"
            local branch_config_file="${BASH_REMATCH[2]}"
            local configured_commit_template="$(git config -f $repo_root_dir/.git/$branch_config_file --get commit.template)"
            if [[ "$branch_name" == "$current_branch" ]]; then
                current_branch_template="$configured_commit_template"
                # Omit current branch unless specified
                [[ -z "$arg_include_current_branch" ]] && continue
            fi
            target_branch_names+=("$branch_name")
            branch_config_files+=("$branch_config_file")
            configured_commit_templates+=("$configured_commit_template")
        fi
    done <<< "$matching_configs"

    # Get array of orphaned templates
    local saved_IFS="$IFS"
    local IFS=$'\n'
    local all_commit_templates=($(find "$repo_root_dir" -maxdepth 1 -type f \( -name ".gitmessage_local*" ! -name "$current_branch_template" \) -exec basename {} \;))
    # Filters out templates in all_commit_templates
    # Based on: https://stackoverflow.com/questions/2312762/compare-difference-of-two-arrays-in-bash#comment78031743_28161520
    local orphan_commit_templates=($(echo ${configured_commit_templates[@]} ${configured_commit_templates[@]} ${all_commit_templates[@]} | tr ' ' '\n' | sort | uniq -u))
    IFS="$saved_IFS"

    # Output: Configured Templates
    if [[ -z "$arg_orphans_only" ]]; then
        # Case 1: We have branches to clean
        if [[ -n "$target_branch_names" ]]; then
            echo "Commit templates and configs will be removed for the following branches:"
            echo ""
            echo_indented "${target_branch_names[@]}"
            echo ""
            # Additional info if current branch has configs
            if [[ -n "$current_branch_template" ]] && [[ -n "$arg_include_current_branch" ]]; then
                echo_warning "This includes configs for the branch you are currently on!"
                echo ""
            fi
        # Case 2: Nothing to clean but current branch has configs
        elif [[ -n "$current_branch_template" ]]; then
            echo "Only branch with a template configured is the current branch."
            echo "To include current branch, run with -B argument."
            echo ""
        fi
    fi

    # Output: Orphan Templates
    if [[ -n "$orphan_commit_templates" ]]; then
        echo "The following commit templates do not have an associated branch and will be deleted:"
        echo ""
        echo_indented "${orphan_commit_templates[@]}"
        echo ""
    fi

    # If there's nothing to clean up
    if [[ -z "$target_branch_names" || -n "$arg_orphans_only" ]] && [[ -z "$orphan_commit_templates" ]]; then
        echo "Nothing to tidy up."
        exit
    fi

    # Prompt for Confirmation
    local confirm_delete="$arg_skip_confirmation"
    while [[ -z "$confirm_delete" ]]; do
        local yn
        echo "Would you like to continue?"
        read -n 1 -p "$(echo_prompt "Confirm (y/[n])")" yn
        echo ""
        yn="${yn:-n}"
        case $yn in
            [Yy]*)
                confirm_delete=1
                break
                ;;
            [Nn]*)
                confirm_delete=0
                break
                ;;
            *)
                echo_error "Please select: y/n."
                ;;
        esac
    done
    [[ "$confirm_delete" < 1 ]] && exit

    # Cleanup: Configured Templates
    if [[ -n "$target_branch_names" && -z "$arg_orphans_only" ]]; then 
        # TODO: optionally delete branches? if so call finish instead?
        echo "Tidying up configs..."
        for branch_name in "${target_branch_names[@]}"; do
            "$UNSET_COMMIT_TEMPLATE_SCRIPT" -b "$branch_name"
            echo ""
        done
    fi

    # Cleanup: Orphan Templates
    if [[ -n "$orphan_commit_templates" ]]; then
        echo "Removing orphaned templates..."
        for orphan_commit_template in "${orphan_commit_templates[@]}"; do
            local orphan_commit_template_path="$repo_root_dir/$orphan_commit_template"
            if [[ -e "$orphan_commit_template_path" ]]; then
                rm "$orphan_commit_template_path"
                [[ ! -e "$orphan_commit_template_path" ]] && echo_success "Deleted $orphan_commit_template"
            fi
        done
    fi
}
main "$@"
